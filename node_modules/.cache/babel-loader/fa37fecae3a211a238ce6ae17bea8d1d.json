{"ast":null,"code":"var _jsxFileName = \"D:\\\\tp\\\\react-basics\\\\src\\\\todo\\\\Todo.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst getLocalData = () => {\n  const lists = localStorage.getItem('todo');\n\n  if (lists) {\n    return JSON.parse(lists);\n  } else {\n    return [];\n  }\n};\n\nconst Todo = () => {\n  _s();\n\n  const [input, setInput] = useState('');\n  const [items, setItems] = useState(getLocalData());\n  const [isEditItem, setIsEditItem] = useState('');\n  const [toggleBtn, setToggleBtn] = useState(false);\n\n  const addItem = () => {\n    if (!input) {\n      console.error('enter data');\n      return;\n    } else if (input && toggleBtn) {\n      setItems(items.map(elem => {\n        if (elem.id === isEditItem) {\n          return { ...elem,\n            name: input\n          };\n        }\n\n        return elem;\n      }));\n      setInput([]);\n      setIsEditItem(null);\n      setToggleBtn(false);\n    } else {\n      const newItems = {\n        id: new Date().getTime().toString(),\n        name: input\n      };\n      setItems([...items, newItems]);\n      setInput('');\n    }\n  };\n\n  const editItem = id => {\n    const edited_item = items.find(elem => {\n      return elem.id === id;\n    });\n    setInput(edited_item.name);\n    setIsEditItem(id);\n    setToggleBtn(true);\n  };\n\n  const deleteItem = id => {\n    const updateItem = items.filter(elem => {\n      return elem.id !== id;\n    });\n    setItems(updateItem);\n  };\n\n  const removeAll = () => {\n    setItems([]);\n  };\n\n  useEffect(() => {\n    localStorage.setItem(\"todo\", JSON.stringify(items));\n  }, [items]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Todo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: event => setInput(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), toggleBtn ? /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-primary m-1 btn-sm\",\n        onClick: addItem,\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-primary m-1 btn-sm\",\n        onClick: addItem,\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: items.map(item => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: item.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-primary m-1 btn-sm\",\n            onClick: () => editItem(item.id),\n            children: \"edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-primary m-1 btn-sm\",\n            onClick: () => deleteItem(item.id),\n            children: \"delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 17\n          }, this)]\n        }, item.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-danger m-1 btn-sm\",\n        onClick: removeAll,\n        children: \"Check All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Todo, \"hFzenhKfIoqToTkB8MgsQmwBr4o=\");\n\n_c = Todo;\nexport default Todo;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todo\");","map":{"version":3,"sources":["D:/tp/react-basics/src/todo/Todo.jsx"],"names":["React","useState","useEffect","getLocalData","lists","localStorage","getItem","JSON","parse","Todo","input","setInput","items","setItems","isEditItem","setIsEditItem","toggleBtn","setToggleBtn","addItem","console","error","map","elem","id","name","newItems","Date","getTime","toString","editItem","edited_item","find","deleteItem","updateItem","filter","removeAll","setItem","stringify","event","target","value","item"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\nconst getLocalData = () => {\r\n  const lists = localStorage.getItem('todo');\r\n  if (lists) {\r\n    return JSON.parse(lists);\r\n  } else {\r\n    return [];\r\n  }\r\n}\r\n\r\nconst Todo = () => {\r\n\r\n  const [input, setInput] = useState('');\r\n  const [items, setItems] = useState(getLocalData());\r\n  const [isEditItem, setIsEditItem] = useState('');\r\n  const [toggleBtn, setToggleBtn] = useState(false);\r\n\r\n  const addItem = () => {\r\n    if (!input) {\r\n      console.error('enter data');\r\n      return;\r\n    } else if (input && toggleBtn) {\r\n      setItems(\r\n        items.map((elem) => {\r\n          if (elem.id === isEditItem) {\r\n            return { ...elem, name: input }\r\n          }\r\n          return elem;\r\n        })\r\n      )\r\n      setInput([]);\r\n      setIsEditItem(null);\r\n      setToggleBtn(false);\r\n    } else {\r\n      const newItems = {\r\n        id: new Date().getTime().toString(),\r\n        name: input\r\n      }\r\n      setItems([...items, newItems]);\r\n      setInput('');\r\n    }\r\n  }\r\n\r\n  const editItem = (id) => {\r\n    const edited_item = items.find((elem) => {\r\n      return elem.id === id;\r\n    });\r\n    setInput(edited_item.name);\r\n    setIsEditItem(id);\r\n    setToggleBtn(true);\r\n  }\r\n\r\n  const deleteItem = (id) => {\r\n    const updateItem = items.filter((elem) => {\r\n      return elem.id !== id;\r\n    });\r\n\r\n    setItems(updateItem);\r\n  }\r\n\r\n  const removeAll = () => {\r\n    setItems([]);\r\n  }\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"todo\", JSON.stringify(items));\r\n  }, [items]);\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <h1>Todo</h1>\r\n      </div>\r\n      <div>\r\n        <input type=\"text\" value={input} onChange={(event) => setInput(event.target.value)} />\r\n        {\r\n          toggleBtn ? (\r\n            <button type=\"button\" className=\"btn btn-primary m-1 btn-sm\" onClick={addItem}>Edit</button>\r\n          ) : (\r\n            <button type=\"button\" className=\"btn btn-primary m-1 btn-sm\" onClick={addItem}>Add</button>\r\n          )\r\n        }\r\n\r\n      </div>\r\n      <div>\r\n        {\r\n          items.map((item) => {\r\n            return (\r\n              <div key={item.id}>\r\n                <span >{item.name}</span>\r\n                <button type=\"button\" className=\"btn btn-primary m-1 btn-sm\" onClick={() => editItem(item.id)}>edit</button>\r\n                <button type=\"button\" className=\"btn btn-primary m-1 btn-sm\" onClick={() => deleteItem(item.id)}>delete</button>\r\n              </div>\r\n            )\r\n          })\r\n        }\r\n      </div>\r\n      <div>\r\n        <button type=\"button\" className=\"btn btn-danger m-1 btn-sm\" onClick={removeAll}>Check All</button>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Todo"]},"metadata":{},"sourceType":"module"}