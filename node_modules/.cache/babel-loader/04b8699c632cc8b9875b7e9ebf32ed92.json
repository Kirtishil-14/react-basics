{"ast":null,"code":"var _jsxFileName = \"D:\\\\tp\\\\react-basics\\\\src\\\\routes\\\\Hooks.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer, createContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst reducer = (state, action) => {\n  if (action.type === 'add') {\n    return state + 1;\n  } else if (action.type === 'sub') {\n    return state - 1;\n  }\n\n  return state;\n};\n\nconst Hooks = () => {\n  _s();\n\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    console.log(`count is : ${count}`);\n  });\n  const [state, dispatch] = useReducer(reducer, 0);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [count, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCount(count + 1),\n        children: \"add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCount(count - 1),\n        children: \"sub\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [state, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => dispatch({\n          type: 'add'\n        }),\n        children: \" add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => dispatch({\n          type: 'sub'\n        }),\n        children: \" sub\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Hooks, \"vLsjQGv355OamOvb3VWh8dh9bTw=\");\n\n_c = Hooks;\nexport default Hooks;\n\nvar _c;\n\n$RefreshReg$(_c, \"Hooks\");","map":{"version":3,"sources":["D:/tp/react-basics/src/routes/Hooks.jsx"],"names":["React","useState","useEffect","useReducer","createContext","reducer","state","action","type","Hooks","count","setCount","console","log","dispatch"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,EAAiDC,aAAjD,QAAsE,OAAtE;;;;AAEA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC,MAAIA,MAAM,CAACC,IAAP,KAAgB,KAApB,EAA2B;AACzB,WAAOF,KAAK,GAAG,CAAf;AACD,GAFD,MAEO,IAAIC,MAAM,CAACC,IAAP,KAAgB,KAApB,EAA2B;AAChC,WAAOF,KAAK,GAAG,CAAf;AACD;;AACD,SAAOA,KAAP;AACD,CAPD;;AASA,MAAMG,KAAK,GAAG,MAAM;AAAA;;AAClB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,CAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,OAAO,CAACC,GAAR,CAAa,cAAaH,KAAM,EAAhC;AACD,GAFQ,CAAT;AAIA,QAAM,CAACJ,KAAD,EAAQQ,QAAR,IAAoBX,UAAU,CAACE,OAAD,EAAU,CAAV,CAApC;AAEA,sBACE;AAAA,4BACE;AAAA,iBACGK,KADH,eAEE;AAAQ,QAAA,OAAO,EAAE,MAAMC,QAAQ,CAACD,KAAK,GAAG,CAAT,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAQ,QAAA,OAAO,EAAE,MAAMC,QAAQ,CAACD,KAAK,GAAG,CAAT,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAME;AAAA,iBACGJ,KADH,eAEE;AAAQ,QAAA,OAAO,EAAE,MAAMQ,QAAQ,CAAC;AAAEN,UAAAA,IAAI,EAAE;AAAR,SAAD,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAQ,QAAA,OAAO,EAAE,MAAMM,QAAQ,CAAC;AAAEN,UAAAA,IAAI,EAAE;AAAR,SAAD,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YANF;AAAA,kBADF;AAcD,CAvBD;;GAAMC,K;;KAAAA,K;AAyBN,eAAeA,KAAf","sourcesContent":["import React, { useState, useEffect, useReducer, createContext } from 'react';\r\n\r\nconst reducer = (state, action) => {\r\n  if (action.type === 'add') {\r\n    return state + 1;\r\n  } else if (action.type === 'sub') {\r\n    return state - 1;\r\n  }\r\n  return state;\r\n}\r\n\r\nconst Hooks = () => {\r\n  const [count, setCount] = useState(0);\r\n\r\n  useEffect(() => {\r\n    console.log(`count is : ${count}`);\r\n  });\r\n\r\n  const [state, dispatch] = useReducer(reducer, 0)\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        {count}\r\n        <button onClick={() => setCount(count + 1)}>add</button>\r\n        <button onClick={() => setCount(count - 1)}>sub</button>\r\n      </div>\r\n      <div>\r\n        {state}\r\n        <button onClick={() => dispatch({ type: 'add' })}> add</button>\r\n        <button onClick={() => dispatch({ type: 'sub' })}> sub</button>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Hooks"]},"metadata":{},"sourceType":"module"}